name: Release Build

on:
  push:
    branches: [ main ]

jobs:
  check-release:
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'MAJOR') ||startsWith(github.event.head_commit.message, 'MINOR') || startsWith(github.event.head_commit.message, 'PATCH')
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      commit_title: ${{ steps.get-commit-title.outputs.commit_title }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from Cargo.toml
        id: get-version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get commit Title without MAJOR/MINOR/PATCH
        id: get-commit-title
        run: |
          COMMIT_TITLE=$(git log -1 --pretty=%B | head -n 1 | sed -E 's/^(MAJOR|MINOR|PATCH)[[:space:]]*:[[:space:]]*//') 
          echo "commit_title=${COMMIT_TITLE}" >> $GITHUB_OUTPUT
          
      - name: Create tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v${{ steps.get-version.outputs.version }}"
          git push origin "v${{ steps.get-version.outputs.version }}"

  build-and-release:
    needs: check-release
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            arch: x86_64
            platform: linux
            ext: tar.gz

          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            arch: i386
            platform: linux
            ext: tar.gz

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            arch: arm64
            platform: linux
            ext: tar.gz
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            arch: x86_64
            platform: darwin
            ext: tar.gz

          - os: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
            platform: darwin
            ext: tar.gz
          
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x86_64
            platform: windows
            ext: zip

          - os: windows-latest
            target: i686-pc-windows-msvc
            arch: i386
            platform: windows
            ext: zip
            
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            arch: arm64
            platform: windows
            ext: zip

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config 
          
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            # Standard x86_64 build
            sudo apt-get install -y libssl-dev
          elif [ "${{ matrix.arch }}" = "i386" ]; then
            # 32-bit build
            sudo dpkg --add-architecture i386
            sudo apt-get update
            sudo apt-get install -y gcc-multilib g++-multilib 
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            # ARM64 build
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            sudo dpkg --add-architecture arm64
          fi
          
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        
      - name: Prepare release archive (Unix)
        if: matrix.platform != 'windows'
        run: |
          mkdir release
          cp target/${{ matrix.target }}/release/infrarust release/
          cd release
          tar czf ../infrarust-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz *
          cd ..

      - name: Prepare release archive (Windows)
        if: matrix.platform == 'windows'
        run: |
          mkdir release
          cp target/${{ matrix.target }}/release/infrarust.exe release/
          cd release
          7z a ../infrarust-${{ matrix.platform }}-${{ matrix.arch }}.zip *
          cd ..

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-release.outputs.version }}
          name: v${{ needs.check-release.outputs.version }} - ${{ needs.check-release.outputs.commit_title }} 
          files: infrarust-${{ matrix.platform }}-${{ matrix.arch }}.${{ matrix.ext }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: check-release
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/infrarust:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/infrarust:${{ needs.check-release.outputs.version }}

  crate-publish:
    continue-on-error: true
    needs: check-release
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
          with:
            ref: v${{ needs.check-release.outputs.version}}
          
        - name: Install Rust
          uses: dtolnay/rust-toolchain@stable
          
        - name: Publish to crates.io
          env:
            CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          run: cargo publish